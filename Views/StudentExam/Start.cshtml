@model List<EduquizSuper.Models.Question>
@{
    ViewData["Title"] = "Take Exam";
    var exam = (EduquizSuper.Models.Exam)ViewData["Exam"];
    var startTime = (DateTime)ViewData["StartTime"];
    var timeLimit = (exam.EndTime - DateTime.Now).TotalMinutes;
}

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-md-8">
            <h2>@exam.ExamName</h2>
            <p>Subject: @exam.Subject.SubjectName</p>
            <p>Total Questions: @Model.Count</p>
        </div>
        <div class="col-md-4 text-end">
            <div class="alert alert-info">
                <div id="timer" data-end-time="@exam.EndTime.ToString("yyyy-MM-ddTHH:mm:ss")">
                    Time Remaining: <span id="hours">00</span>:<span id="minutes">00</span>:<span id="seconds">00</span>
                </div>
            </div>
        </div>
    </div>

    @if (Model.Count == 0)
    {
        <div class="alert alert-warning">
            <h4>No questions found for this exam.</h4>
            <p>Please contact your instructor or try another exam.</p>
        </div>
    }
    else
    {
        <form id="examForm" asp-action="Submit" method="post">
            <input type="hidden" name="examId" value="@exam.ExamId" />
            <input type="hidden" name="startTime" value="@startTime.ToString("yyyy-MM-ddTHH:mm:ss")" />

            <div class="row">
                <div class="col-md-9">
                    <!-- Questions section -->
                    <div class="card">
                        <div class="card-body">
                            <!-- Progress bar -->
                            <div class="progress mb-4" style="height: 20px;">
                                <div id="examProgress" class="progress-bar" role="progressbar" style="width: 0%" 
                                     aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                    Question 1/@Model.Count
                                </div>
                            </div>

                            @for (int i = 0; i < Model.Count; i++)
                            {
                                var question = Model[i];
                                var questionId = question.QuestionId;
                                var isFirst = i == 0;
                                var isLast = i == Model.Count - 1;

                                <div class="question-item" id="question-@i" style="display: @(i == 0 ? "block" : "none");">
                                    <h5 class="question-title mb-4">
                                        <span class="badge bg-primary">Question @(i + 1)</span>
                                        @Html.Raw(question.QuestionContent)
                                    </h5>

                                    <div class="answers-list mt-3">
                                        @try
                                        {
                                            var answers = Newtonsoft.Json.JsonConvert.DeserializeObject<List<dynamic>>(question.AnswersJson);

                                            @if (answers != null && answers.Count > 0)
                                            {
                                                foreach (var answer in answers)
                                                {
                                                    <div class="form-check mb-3">
                                                        <input class="form-check-input" type="radio"
                                                               name="answers[@questionId]"
                                                               id="answer-@questionId-@answer.id"
                                                               value="@answer.id"
                                                               data-question-index="@i" />
                                                        <label class="form-check-label" for="answer-@questionId-@answer.id">
                                                            @answer.content
                                                        </label>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="alert alert-danger">No answers found for this question.</div>
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            <div class="alert alert-danger">Error loading answers: @ex.Message</div>
                                        }
                                    </div>

                                    <div class="d-flex justify-content-between mt-4">
                                        <button type="button" class="btn btn-secondary prev-question" 
                                                @(isFirst ? "disabled" : "") onclick="showQuestion(@(i-1))">
                                            <i class="bi bi-arrow-left"></i> Previous
                                        </button>
                                        @if (isLast)
                                        {
                                            <button type="submit" class="btn btn-primary" id="submitBtn">Submit Exam</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-primary next-question" 
                                                    onclick="showQuestion(@(i+1))">
                                                Next <i class="bi bi-arrow-right"></i>
                                            </button>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-3">
                    <!-- Question navigator -->
                    <div class="card">
                        <div class="card-header">
                            <h5>Question Navigator</h5>
                        </div>
                        <div class="card-body">
                            <div class="question-navigator d-flex flex-wrap">
                                @for (int i = 0; i < Model.Count; i++)
                                {
                                    <button type="button" 
                                            class="btn btn-outline-secondary question-nav-btn m-1" 
                                            onclick="showQuestion(@i)" 
                                            data-question-index="@i">
                                        @(i + 1)
                                    </button>
                                }
                            </div>

                            <div class="mt-3">
                                <div class="d-flex align-items-center mb-2">
                                    <div class="me-2" style="width: 20px; height: 20px; background-color: #28a745; border-radius: 50%;"></div>
                                    <span>Answered</span>
                                </div>
                                <div class="d-flex align-items-center">
                                    <div class="me-2" style="width: 20px; height: 20px; background-color: #6c757d; border-radius: 50%;"></div>
                                    <span>Unanswered</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Display the number of questions loaded
            console.log("Questions loaded: " + @Model.Count);

            let currentQuestionIndex = 0;
            const totalQuestions = @Model.Count;

            // Timer functionality
            function updateTimer() {
                var endTime = new Date($("#timer").data("end-time"));
                var currentTime = new Date();
                var diff = endTime - currentTime;

                if (diff <= 0) {
                    // Time's up - submit the form
                    clearInterval(timerInterval);
                    $("#examForm").submit();
                    return;
                }

                var hours = Math.floor(diff / (1000 * 60 * 60));
                var minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((diff % (1000 * 60)) / 1000);

                $("#hours").text(hours.toString().padStart(2, '0'));
                $("#minutes").text(minutes.toString().padStart(2, '0'));
                $("#seconds").text(seconds.toString().padStart(2, '0'));
            }

            var timerInterval = setInterval(updateTimer, 1000);
            updateTimer();

            // Update question navigator and progress
            function updateQuestionNavigator() {
                $(".question-nav-btn").removeClass("btn-success").addClass("btn-outline-secondary");

                $("input:checked").each(function () {
                    var questionIndex = $(this).data("question-index");
                    $(".question-nav-btn[data-question-index='" + questionIndex + "']")
                        .removeClass("btn-outline-secondary")
                        .addClass("btn-success");
                });
            }

            // Update progress bar
            function updateProgress() {
                const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;
                $("#examProgress")
                    .css("width", progress + "%")
                    .attr("aria-valuenow", progress)
                    .text(`Question ${currentQuestionIndex + 1}/${totalQuestions}`);
            }

            // Show specific question
            window.showQuestion = function(index) {
                $(".question-item").hide();
                $(`#question-${index}`).show();
                currentQuestionIndex = index;
                updateProgress();

                // Update button states
                $(".prev-question").prop("disabled", index === 0);
                if (index === totalQuestions - 1) {
                    $(".next-question").hide();
                    $("#submitBtn").show();
                } else {
                    $(".next-question").show();
                    $("#submitBtn").hide();
                }
            }

            // Initial updates
            updateQuestionNavigator();
            updateProgress();

            // Update when an answer is selected
            $("input[type='radio']").change(function () {
                updateQuestionNavigator();
            });

            // Confirm before leaving the page
            $(window).on('beforeunload', function () {
                return "Are you sure you want to leave this page? Your exam progress will be lost.";
            });

            // Disable the confirmation when submitting the form
            $("#examForm").on("submit", function () {
                $(window).off('beforeunload');
            });
        });
    </script>
}